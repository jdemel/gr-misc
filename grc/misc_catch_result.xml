<?xml version="1.0"?>
<!--
###################################################
## Variable with callback for other function
###################################################
 -->
<block>
	<name>Catch Function Result</name>
	<key>variable_catch_result</key>
	<import>import time</import>
	<import>import threading</import>
	<var_make>self.$(id) = $(id) = $value</var_make>
	<make>#slurp
self.$(id) = val = self.$block_id().$func()($params)
def _$(id)_probe():
    notset = True
    while notset:
        try:
            self.set_$(id)(self.$(id))
            notset = False
        except:
            notset = True
    time.sleep(1.0/10.0)
self._$(id)_thread = threading.Thread(target=_$(id)_probe)
self._$(id)_thread.daemon = True
self._$(id)_thread.start()
</make>
	<callback>self.set_$(id)(self.$block_id().$func()($params))</callback>

    <param>
        <name>Initial Value</name>
        <key>value</key>
        <value>0</value>
        <type>raw</type>
    </param>

    <param>
        <name>Block ID</name>
        <key>block_id</key>
        <type>string</type>
    </param>

    <param>
        <name>Block Function</name>
        <key>func</key>
        <type>string</type>
    </param>

    <param>
        <name>Function Params</name>
        <key>params</key>
        <value>0</value>
        <type>raw</type>
    </param>

    <doc>Call any blocks member function and write it to an existing variable given in the result field.
    </doc>
</block>
